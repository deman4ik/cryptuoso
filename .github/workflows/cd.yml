name: CD

on:
    push:
        branches: [master, dev]

jobs:
    build:
        if: "contains(github.event.head_commit.message, 'DEPLOY |')"
        name: Build, push, and deploy
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version: [17.x]
        steps:
            - name: Checkout
              uses: actions/checkout@master
              with:
                  fetch-depth: 0

            - name: Use Node.js
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}

            - uses: webfactory/ssh-agent@v0.4.1
              with:
                  ssh-private-key: ${{ secrets.GH_SSH_KEY }}

            - name: NPM Install
              run: npm install

            - name: Check history
              uses: actions/github-script@v2
              id: history
              with:
                  result-encoding: string
                  github-token: ${{secrets.GITHUB_TOKEN}}
                  script: |
                      const matched = context.payload.head_commit.message.match(/(?<=DEPLOY \|).*?(?=\s*\|)/gs);
                      const list = matched && Array.isArray(matched) && matched.length > 0 ? matched[0].replace(/(\r\n|\n|\r)/gm," ").trim() : null;
                      if (list === "ALL") {
                             return "--all";
                         } else if (list) {
                             return list;
                         } else {
                         const branch = context.payload.ref.split("/")[2];

                         const {
                             data: { workflow_runs }
                         } = await github.actions.listWorkflowRuns({
                             owner: context.payload.repository.full_name.split("/")[0],
                             repo: context.payload.repository.full_name.split("/")[1],
                             workflow_id: "cd.yml"
                         });
                         if (
                             workflow_runs &&
                             Array.isArray(workflow_runs) &&
                             workflow_runs.length > 0
                         ) {
                             const sha = workflow_runs.find(
                             ({ head_branch, status, conclusion }) =>
                                 head_branch === branch &&
                                 status === "completed" &&
                                 conclusion === "success"
                             ).head_sha;
                             return `--base=${sha} --head=${branch}`;
                         } else return "--all";
                      }

            - name: List services
              id: services
              run: |
                  if [[ "${{steps.history.outputs.result}}" == *"--"* ]];
                  then
                     echo ::set-output name=list::$(node ./node_modules/@nrwl/cli/bin/nx.js affected:apps --plain ${{steps.history.outputs.result}} )
                  else
                     echo ::set-output name=list::${{steps.history.outputs.result}}
                  fi

            - name: Echo services
              run: echo ${{ steps.services.outputs.list }}

            - name: Login to Yandex Cloud Container Registry
              id: login-cr
              uses: yc-actions/yc-cr-login@v1
              with:
                  yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}

            - name: Build base container
              run: docker build --build-arg GITHUB_SSH_KEY="${{ secrets.GH_SSH_KEY }}" -t cryptuoso-build:latest -f build.Dockerfile .

            - name: Build containers
              run: services=(${{ steps.services.outputs.list }}); for i in "${services[@]}"; do docker build --build-arg SERVICE_NAME="${i}"  -t cr.yandex/crpcpbvo3bat5t2m515o/$i:$(echo $GITHUB_SHA | head -c7) .; done;

            - name: Save YC CA
              env:
                  YC_CA: ${{ secrets.YC_CA }}
              run: echo $YC_CA | base64 -d > $GITHUB_WORKSPACE/ca.pem

            - name: Save YC kubeconfig
              env:
                  YC_KUBECONFIG: ${{ secrets.YC_KUBECONFIG }}
              run: echo $YC_KUBECONFIG | base64 -d > $GITHUB_WORKSPACE/.kubeconfig

            - name: Push image to Docker Hub
              run: services=(${{ steps.services.outputs.list }}); for i in "${services[@]}"; do docker push cr.yandex/crpcpbvo3bat5t2m515o/${i}:$(echo $GITHUB_SHA | head -c7); done;

            - name: Update deployment file IMAGE and TAG
              run: services=(${{ steps.services.outputs.list }}); TAG=$(echo $GITHUB_SHA | head -c7); for i in "${services[@]}"; do sed -i 's|<IMAGE>|cr.yandex/crpcpbvo3bat5t2m515o/'${i}':'${TAG}'|' $GITHUB_WORKSPACE/deployments/${i}.yaml; done;

            - name: Update deployment file APP
              run: services=(${{ steps.services.outputs.list }}); for i in "${services[@]}"; do sed -i 's|<APP>|'${i}'|' $GITHUB_WORKSPACE/deployments/${i}.yaml; done;

            - name: Update deployment file ENV
              run: services=(${{ steps.services.outputs.list }}); for i in "${services[@]}"; do sed -i 's|<ENV>|prod|' $GITHUB_WORKSPACE/deployments/${i}.yaml; done;

            - name: Deploy deployment to DigitalOcean Kubernetes
              run: |
                  services=(${{ steps.services.outputs.list }}); 
                  for i in "${services[@]}"; 
                  do
                    if [[ "${i}" != *"user-robot-dedicated"* ]];
                    then
                         kubectl --kubeconfig=$GITHUB_WORKSPACE/.kubeconfig apply -f $GITHUB_WORKSPACE/deployments/${i}.yaml; 
                    fi
                  done;

            - name: Verify deployment
              run: |
                  services=(${{ steps.services.outputs.list }}); 
                  for i in "${services[@]}"; 
                    do 
                    if [[ "${i}" != *"user-robot-dedicated"* ]];
                    then
                    kubectl --kubeconfig=$GITHUB_WORKSPACE/.kubeconfig --namespace=prod rollout status deployment/${i}-prod; 
                    fi
                  done;
