import Service from "../app/service";
import { MailGunEventTypes, MailGunEventData } from "@cryptuoso/mail";
import { ajax } from "@cryptuoso/test-helpers";
import { v4 as uuid } from "uuid";
import { sleep } from "@cryptuoso/helpers";
import { User } from "@cryptuoso/user-state";

var mockMailGunValidateWebhook = jest.fn(function () {
    //console.log(arguments);
    return true;
});

jest.mock(
    "mailgun-js",
    () =>
        function () {
            return {
                validateWebhook: mockMailGunValidateWebhook
            };
        }
);

jest.setTimeout(20000);

function buildMailGunWebhookBody(eventData: MailGunEventData) {
    return {
        signature: {
            timestamp: "1234",
            token: "11111222223333344444555556666677777888889999900000",
            signature: "afhb"
        },
        "event-data": { ...eventData }
    };
}

describe("", () => {
    const port = 3000;
    const service = new Service({ port });
    const db = service.db;
    const mailgunRoute = `http://localhost:${port}/webhooks/mailgun`;

    let user: User;

    beforeAll(async (done) => {
        await service.startService();

        user = await db.pg.one(db.sql`
            SELECT *
            FROM users
            WHERE email IS NOT NULL
            LIMIT 1;
        `);

        //console.warn(user);

        done();
    });

    afterAll(async (done) => {
        console.warn("Reverting");

        await db.pg.query(db.sql`
            UPDATE users
            SET settings = ${db.sql.json(user.settings)}
            WHERE id = ${user.id};
        `);
        
        await sleep(1000);

        done();
    });

    test("Bad body", async () => {
        const res = await ajax.post(mailgunRoute, null, {});
        
        expect(res.status).toBe(400);
    });

    test("Bad token length", async () => {
        const body = buildMailGunWebhookBody({
            event: MailGunEventTypes.OPENED,
            id: uuid()
        });
        body.signature.token = "123";

        const res = await ajax.post(mailgunRoute, null, body);
        
        expect(res.status).toBe(400);
    });

    test("Opened", async () => {
        const eventData: MailGunEventData = {
            event: MailGunEventTypes.OPENED,
            id: uuid()
        };

        const notificationId = (await db.pg.oneFirst(db.sql`
            INSERT INTO notifications(
                type, user_id, mailgun_id, data
            ) VALUES (
                'type',
                ${user.id},
                ${eventData.id},
                '{}'
            )
            RETURNING id;
        `)) as string;

        console.warn(notificationId);

        //await sleep(3000);
        const res = await ajax.post(mailgunRoute, null, buildMailGunWebhookBody(eventData));
        //const { parsedBody } = res;

        //console.warn(parsedBody);

        //console.warn(mockMailGun.send.mock.calls[0][0]);

        //expect(mockMailGun.send).toBeCalledWith(refObj);

        const readed = await db.pg.oneFirst(db.sql`
            DELETE
            FROM notifications
            WHERE id = ${notificationId}
            RETURNING readed;
        `);

        expect(res.status).toBe(200);
        expect(readed).toBeTruthy();
    });

    test("Unsubscribed", async () => {
        const eventData: MailGunEventData = {
            event: MailGunEventTypes.UNSUBSCRIBED,
            recipient: user.email
        };

        if (!(user.settings.notifications.signals.email || user.settings.notifications.trading.email)) {
            const newSettings: User["settings"] = JSON.parse(JSON.stringify(user.settings));
            newSettings.notifications.signals.email = true;
            newSettings.notifications.trading.email = true;

            console.warn("Updating");

            await db.pg.query(db.sql`
                UPDATE users
                SET settings = ${db.sql.json(newSettings)}
                WHERE id = ${user.id};
            `);
        }

        const res = await ajax.post(mailgunRoute, null, buildMailGunWebhookBody(eventData));

        const settings: User["settings"] = (await db.pg.oneFirst(db.sql`
            SELECT settings
            FROM users
            WHERE id = ${user.id};
        `)) as any;

        expect(res.status).toBe(200);
        expect(settings.notifications.signals.email).toBeFalsy();
        expect(settings.notifications.trading.email).toBeFalsy();
    });
});
